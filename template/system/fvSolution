/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1912                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSolution;
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \
// Solver                    | Sym | Asym| Remarks                            //
//----------------------------------------------------------------------------//
// PCG                       |  O  |  X  | Preconditioner                     //
// PBiCG                     |  X  |  O  | Preconditioner                     //
// PBiCGStab                 |  O  |  O  | Preconditioner                     //
// GAMG                      |  O  |  O  | Smoother                           //
// smoothSolver              |  O  |  O  | Smoother                           //
//============================================================================//
// Preconditioner            | Sym | Asym| Remarks                            //
//----------------------------------------------------------------------------//
// DIC                       |  O  |  X  |                                    //
// FDIC                      |  O  |  X  |                                    //
// DILU                      |  X  |  O  |                                    //
// GAMG                      |  O  |  O  |                                    //
// diagonal                  |  O  |  O  |                                    //
// none                      |  O  |  O  |                                    //
//============================================================================//
// Smoother                  | Sym | Asym| Remarks                            //
//----------------------------------------------------------------------------//
// DIC                       |  O  |  X  |                                    //
// DICGaussSeidel            |  O  |  X  |                                    //
// FDIC                      |  O  |  X  |                                    //
// DILU                      |  X  |  O  |                                    //
// DILUGaussSeidel           |  X  |  O  |                                    //
// GaussSeidel               |  O  |  O  |                                    //
// nonBlockingGaussSeidel    |  O  |  O  |                                    //
// symGaussSeidel            |  O  |  O  |                                    //
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*---------------------------------------------------------------------------*\
| GAMG Optional Controls                                                      |
|// Agglomeration                                                             |
|   cacheAgglomeration          true;                                         |
|   nCellsInCoarsestLevel       10;                                           |
|   directSolveCoarsest         false;                                        |
|   agglomeration               <GAMGAgglomeration>;  ???                     |
|   processorAgglomerator       <GAMGAgglomeration>;  ???                     |
|   mergeLevels                 1;                                            |
|// Solver                                                                    |
|   nPreSweeps                  0;                                            |
|   preSweepsLevelMultiplier    1;                                            |
|   maxPreSweeps                4;                                            |
|   nPostSweeps                 2;                                            |
|   postSweepsLevelMultiplier   1;                                            | 
|   maxPostSweeps               4;                                            |
|   nFinestSweeps               2;                                            |
|   interpolateCorrection       false;                                        |
|   scaleCorrection             yes;     // YES : symmetric, NO : asymmetic   |
\*---------------------------------------------------------------------------*/

solvers
{
    // time derivatives & Laplacian terms (p...) ==> symmetry
    //                  ==> GAMG
    //                  ==> PCG (GAMG too slow / unstable, with 1000+ cores)
    // advective derivatives (U, k, omega, epsilon, T...) ==> asymmetry
    //                  ==> smoothSolver w/ GaussSeidel
    //                  ==> PBiCGStab w/ DILU : faster in general
    //                  ==> inexpensive, use tight tolerance(1e-08)
    p
    {
        solver          GAMG;       // GAMG 67, PCG 25, smoothSolver 5...
     // preconditioner  DIC;        // DIC 25, DILU 2
        smoother        GaussSeidel;    // GaussSeidel 53, DICGaussSeidel 7...
        tolerance       1e-06;      // 1e-06 ~ 1e-08 (61, 13 13)
        relTol          0.01;       // 0 to converge to solver tolerance
        minIter         3;          // OPTIONAL, defualt value : 0
        maxIter         100;        // OPTIONAL, default value : 1000
    }

    pFinal
    {
        $p;
        relTol          0.0;
    }

    U
    {
        solver          smoothSolver;   // smoothSolver 154, PBiCGStab 49...
     // preconditioner  DILU;           // DILU 50, DIC 3
        smoother        symGaussSeidel; // symGaussSeidel 113, GaussSeidel 42..
        tolerance       1e-08;          // 1e-05 ~ 1e-08 (62,, 78, 28, 22)
        relTol          0.001;            // 0.1 : 107, 0 : 88, 0.01 : 12
    }
    UFinal
    {
        $U;
        relTol          0.0;
    }
}

relaxationFactors
{
    // improve stability of computation, particularly STEADY-STATE problem
    // Q^n = Q^o + alpha ( Q - Q^o ),  0 < alpha <= 1
    // alpha = 0 : solution does not change with successive iterations
    // alpha = 1 : matrix forced to become diagonally equal
    // alpha increase ==> under-relaxation increase
    fields
    {
     // p               0.3;
     // rho             1;
     // p_rgh           0.7;
     // iDmdt           0.1;
     // alpha           0.1;
    }
    equations
    {
     // U               0.7;
     // k               0.7;
     // epsilon         0.7;
     // nuTilda         0.7;
     // R               0.7;
     // h               0.7;
     // e               0.7;
     // ".*"            1;          // pimpleFoam, TRANSIENT CASE
    }
}

// SIMPLEC : consistent SIMPLE
// SIMPLE
// {
//     consistent       yes;
//     ...
// }
// Only needs small under-relaxation for U & transport. No need for pressure
// relaxationFactors { equations { U 0.9; ".*" 0.9; } }

// SIMPLE : 1 nCorrectors, PISO : > 1 nCorrectors (typ. <= 4)
// nNonOrthogonalCorrectors : 0 for orthogonal, ~20 for most non-ortho mesh

// SIMPLE
// residualControl
// {
//     p                   1e-2;
//     "(Ux Uy)"           1e-4;
//     "(k|epsilon|omega)" 1e-4;
// }

// PIMPLE
// nOuterCorrectors 50;
// residualControl
// {
//     "(U|k|epsilon|omega)"
//     {
//         relTol      0;
//         tolerance   1e-4;
//     }
// }

PISO
{
    nCorrectors                 2;
    nNonOrthogonalCorrectors    0;
    momentumPredictor           yes;
    pRefValue                   0;
    pRefCell                    0;
}

PIMPLE
{
    nCorrectors                 2;
    nNonOrthogonalCorrectors    0;
    nOuterCorrectors            1;
    momentumPredictor           yes;
    pRefValue                   0;      // 100,000;
    pRefCell                    0;      // pRefpoint    (0 0 0.15);
}

SIMPLE
{
    consistent                  yes
        ;
    nNonOrthogonalCorrectors    0;
    momentumPredictor           off;
    pRefValue                   0;
    pRefCell                    0;

    residualControl
    {
        U                       0.0001;
        "(k|epsilon|omega)"     0.001;
    }
}


// ************************************************************************* //
