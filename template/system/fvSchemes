/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1912                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default     //  steadyState;        // sets time derivatives to zero, STEADY-STATE
                    Euler;              // transient, 1st order implicit, bounded
                //  backward;           // transient, 2nd order implicit, potentially unbounded
                //  CrankNicolson 0.9;  // transient, 2nd order implicit, bounded, off-centering coeff
                                        // psi = 1 : pure CrankNicolson, psi = 0 : Euler
                /// localEuler;         // local time-step 1st order implicit/explicit, STEADY-STATE
                /// CoEuler;            // Courant# limited 1st order implicit/explicit, STEADY-STATE
                /// SLTS;               // Stabilised local time-step 1st order implicit/explicit, STEADY-STATE
                /// bounded;            // Bounded form of the selected ddt scheme
    // ddt(Q)       backward;
}

interpolationSchemes
{
    default         linear;
    // <equation term> <interpolation scheme>;
    ///      <interpolation scheme> : linear, cubic, pointLinear, upwind, linearUpwind, limitedLinear,
    ///                               vanLeer, vanLeerV, MUSCL, limitedCubic, SFCD, Gamma...
}

gradSchemes
{
    default         Gauss linear;
    grad(U)         cellLimited Gauss linear 1;     // improve boundedness & stability for poorer mesh
    // grad(Q)      <optional limiter> <gradient scheme> <interpolation scheme> <optional limiter k:0..1>;
                //  <optional limiter> : cellMDLimited - celllLimited - faceMDLimited - faceLimited
                //                       least dissipation <==> most dissipation
                //         <limiter k> : 0 (no limit, accuracy) <==> 1 (full limit, stability)
                //  <gradient scheme> : Gauss <interpolation scheme>;
                //                      leastSquares;
                ///                     pointCellsLeastSquares;
                ///                     edgeCellsLeastSquares;
                ///                     fourth;
}

divSchemes
{
    default         none;
                //  [bounded] Gauss <interpolationScheme>
                //          : Gauss scheme is the ONLY choice of discretization...
                //          : "bounded" form for STEADY-STATE
    div(phi,U)      Gauss limitedLinearV 1;
                //  linear : 2nd order, unbounded
                //  linearUpwind : 2nd order, unbounded(much less), requires "grad(U)"
                //  LUST : blended 75% "linear" / 25% "linearUpwind", requires "grad(U)"
                //  limitedLinear [0..1] : 1st/2nd order, 0 (linear) <==> 1 (limiting upwind)
                //  upwind : 1st order, bounded, generally too inaccurate to be recommended
                //  "V-schemes" : more stable / less accurate
}

laplacianSchemes
{
    default         Gauss linear corrected;
}

snGradSchemes
{
    default         corrected;
}


// ************************************************************************* //
