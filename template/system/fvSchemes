/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1912                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default     //  steadyState;        // sets time derivatives to zero, STEADY-STATE
                    Euler;              // transient, 1st order implicit, bounded
                    // :::   STABLE / DIFFUSIVE
                //  backward;           // transient, 2nd order implicit, potentially unbounded
                    // ::: ACCURATE / OSCILLATORY
                //  CrankNicolson 0.9;  // transient, 2nd order implicit, bounded, off-centering coeff
                                        // psi = 1 : pure CrankNicolson, psi = 0 : Euler, psi = 0.9 typ.
                /// localEuler;         // local time-step 1st order implicit/explicit, STEADY-STATE
                /// CoEuler;            // Courant# limited 1st order implicit/explicit, STEADY-STATE
                /// SLTS;               // Stabilised local time-step 1st order implicit/explicit, STEADY-STATE
                /// bounded;            // Bounded form of the selected ddt scheme
    // ddt(Q)       backward;
// #ifeq ${FOAM_APPLICATION} simpleFoam
//     default steadyState;
// #else
//     default Euler;
// #endif
}

interpolationSchemes
{
    default         linear;
    // <equation term> <interpolation scheme>;
    ///      <interpolation scheme> : linear, cubic, pointLinear, upwind, linearUpwind, limitedLinear,
    ///                               vanLeer, vanLeerV, MUSCL, limitedCubic, SFCD, Gamma...
}

gradSchemes
{
    default         Gauss linear;                       // ACCURATE / OSCILLATORY
                //  cellLimited Gauss linear 0.5;       // ALL-AROUND
                //  cellLimited Gauss linear 1;         // STABLE / DIFFUSIVE
                
    grad(U)         cellLimited Gauss linear 1;     // improve boundedness & stability for poorer mesh
    // grad(Q)      <optional limiter> <gradient scheme> <interpolation scheme> <optional limiter k:0..1>;
                //  <optional limiter> : cellMDLimited - celllLimited - faceMDLimited - faceLimited
                //                       least dissipation <==> most dissipation
                //         <limiter k> : 0 (no limit, accuracy) <==> 1 (full limit, stability)
                //  <gradient scheme> : Gauss <interpolation scheme>;
                //                      leastSquares;
                ///                     pointCellsLeastSquares;
                ///                     edgeCellsLeastSquares;
                ///                     fourth;
}

divSchemes
{
    default         none;
                //  [bounded] Gauss <interpolationScheme>
                //    : Gauss scheme is the ONLY choice of discretization...
                //    : "bounded" form for STEADY-STATE
                //  <interpolationScheme>
                //      linear : 2nd order, unbounded
                //      linearUpwind : 2nd order, unbounded(much less),   REQUIRES "grad(U)"
                //      LUST : blended 75% "linear" / 25% "linearUpwind", REQUIRES "grad(U)"
                //      limitedLinear [0..1] : 1st/2nd order, 0 (linear) <==> 1 (limiting upwind)
                //      upwind : 1st order, bounded, generally too inaccurate to be recommended
                //      "V-schemes" : more stable / less accurate
    div(U)          Gauss linear;               // non-advective terms
    div(phi,U)      Gauss limitedLinearV 1;     // advective terms
                // "div\(phi.*,U.*\)"   Gauss limitedLinearV 1; // REGEX form
                //  Gauss linear;                   // ACCURATE / OSCILLATORY
                //  Gauss linearUpwindV grad(U);    // ALL-AROUND
                //  Gauss upwind;                   // STABLE / DIFFUSIVE 
    div(phi,omega)
                    Gauss limitedLinear 1;          // ACCURATE / OSCILLATORY
                //  Gauss linearUpwind default;     // ALL-AROUND:w
                //  Gasuu upwind;                   // STABLE / DIFFUSIVE
    div(phi,k)  
                //  Gauss limitedLinear 1;          // ACCURATE/ OSCILLATORY
                    Gauss linearUpwind default;     // ALL-AROUND
                //  Gauss upwind;                   // STABLE / DIFFUSIVE
    div(phi,K)      Gauss limitedLinear 1;      // Gauss limitedLinear 1;
    div(phi,e)      Gauss limitedLinear 1;      // advection of scalar fields ==> BOUNDEDNESS IMPORTANT !!
                //  bounded Gauss upwind;
                //  Gauss vanLeer;              // less strong limiting than "limitedLinear"
    div(phi,alpha)  Gauss vanLeer;
    div(phi,epsilon)                        Gauss upwind;
    div(phirb,alpha)                        Gauss linear;
    div((nuEff*dev(T(grad(U)))))            Gauss linear;                    
    div(((rho*nuEff)*dev2(T(grad(U)))))     Gauss linear;
    div((nuEff*dev2(T(grad(U)))))           Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear corrected;
    //          Gauss <interpolationScheme> <snGradScheme>
}

snGradSchemes
{
    default         corrected;                  // a > 70', apply "limited" scheme
                //  limited corrected <psi>
                //     <psi> =  1    : non-orthogonality < 70'
                //     <psi> = 0.5   : 70' < non-orthogonality < 85'
                //     <psi> = 0.333 : non-orthogonality > 85'
                //                     increase non-ortho corrections & GET A BETTER MESH !!!
                //     limited corrected 0.33;     // 0 : uncorrected, more stable
                //     limited corrected 0.5;      // 1 : corrected,   more accurate
                //  uncorrected;                //  for low non-orthogonality mesh, a < 5'
                //  orthogonal;                 //  for low non-orthogonality mesh, a < 5'

}


// ************************************************************************* //
